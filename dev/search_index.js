var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [SpmGrids]\nPrivate = false","category":"page"},{"location":"reference/#SpmGrids.get_channel","page":"Reference","title":"SpmGrids.get_channel","text":"get_channel(grid::SpmGrid, name::AbstractString,\n    index_x::GridRange, index_y::GridRange, index_channel::GridRange=:)::Array{Float32}\n\nReturns the data for the channel name at the point(s) specified by index_x, index_y The channel data can be indexed by index_channel.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SpmGrids.get_parameter-Tuple{SpmGrids.SpmGrid, AbstractString, Union{Colon, UnitRange{Int64}, Int64}, Union{Colon, UnitRange{Int64}, Int64}}","page":"Reference","title":"SpmGrids.get_parameter","text":"get_parameter(grid::SpmGrid, name::AbstractString,\n    index_x::GridRange, index_y::GridRange)::Union{Float32, Array{Float32}}\n\nReturns the value for parameter name at the point(s)specified by index_x, index_y.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SpmGrids.load_grid-Tuple{AbstractString}","page":"Reference","title":"SpmGrids.load_grid","text":"load_grid(filename::AbstractString; header_only::Bool=false)\n\nLoads a grid from a binary file. If header_only is true, then only the header is loaded.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SpmGrids.plot_line","page":"Reference","title":"SpmGrids.plot_line","text":"plot_line(grid::SpmGrid, channel_y::String,\n    index_x::GridRange, index_y::GridRange, index_channel::GridRange=nothing;\n    channel_x::String=\"\", backward::Bool=true, ax::Any=nothing, backend::Module=Main,\n    kwargs...)::Nothing)\n\nPlots a line in the three-dimensional data spanned by xy plane and the spectroscopy data channel_y. Indexing is done through index_x, index_y and index_channel and should be done such that a one-dimensional array is obtained. It is also possible to plot channel_y vs channel_x (which defaults ot the sweep signal if not specified) for one point in the grid If include_backward is true` (default), the plot will include data from backward sweep as well (if they exist).\n\nBefore using this function, a Makie backend (GLMakie, CairoMakie or WGLMakie) should be imported and the figure or axis should be set up. A particular Axis can be specified via the ax keyword argument. By default, the Makie backend from the Main module is used; it can also be directly specified via the backend keyword argument.\n\nExtra keyword arguments can be specified and will be passed through to the plot function. Keyword arrguments with the suffix _bwd will be used for plotting of the backward scan.    \n\n\n\n\n\n","category":"function"},{"location":"reference/#SpmGrids.plot_spectrum","page":"Reference","title":"SpmGrids.plot_spectrum","text":"plot_spectrum(grid::SpmGrid, channel_x::String, channel_y::String,\n    index_x::GridRange, index_y::GridRange, index_channel::GridRange=:;\n    backward::Bool=true, ax::Any=nothing, backend::Module=Main,\n    kwargs...)::Nothing)\n\nPlots a scatter plot of channel_y vs channel_x on the given index_x and y_index. If channel_x is \"\", then the sweep signal will be used for channel_x. Additionally, the spectrum data can be indexed by index_channel. If include_backward is true` (default), the plot will include data from backward sweep as well (if they exist).\n\nBefore using this function, a Makie backend (GLMakie, CairoMakie or WGLMakie) should be imported and the figure or axis should be set up. A particular Axis can be specified via the ax keyword argument. By default, the Makie backend from the Main module is used; it can also be directly specified via the backend keyword argument.\n\nExtra keyword arguments can be specified and will be passed through to the plot function. Keyword arrguments with the suffix _bwd will be used for plotting of the backward scan.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = SpmGrids","category":"page"},{"location":"#SpmGrids","page":"Introduction","title":"SpmGrids","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Documentation for SpmGrids.","category":"page"},{"location":"#About","page":"Introduction","title":"About","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A julia library to analyze scanning tuprobe microscopy grid data. Currently, only Nanonis files are supported.","category":"page"},{"location":"#Usage","page":"Introduction","title":"Usage","text":"","category":"section"},{"location":"#Loading-data-and-parameters","page":"Introduction","title":"Loading data and parameters","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"using SpmGrids\ngrid = load_grid(\"Bias_spectroscopy.3ds\");\n\ngrid.experiment_parameters  # available parameter names\ngrid.channel_names  # available channel names\ngrid.size, grid.size_unit, grid.center, grid.angle, grid.pixelsize  # grid parameters\ngrid.start_time, grid.end_time  # more parameters\ngrid.header  # even more parameters\n\nx = get_channel(grid, \"Current\", 5, 5);  # `Current` channel at point 5,5\nx = get_channel(grid, \"Current\", :, 5);  # `Current` channel for 5th row\n#  20th point of `Current` channel for 5th row\nx = get_channel(grid, \"Current\", :, 5, 20);\nx = get_channel(grid, grid.sweep_signal, 5, 6);  # sweep signal at point 5,6\np = get_parameter(grid, \"Z offset\", 3, 5);  # `Z offset` parameter at point 3,5\n\n# get the first 50 points of the `Current` channel for 5th and 6th rows\nx = get_channel(grid, \"Current\", :, 5:6, 1:50);\nsize(x) # 50 points of data for 20 columns and 2 rows","category":"page"},{"location":"#Plotting-spectra","page":"Introduction","title":"Plotting spectra","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"using SpmGrids\nusing CairoMakie  # use any Makie backend you like\n\ngrid = load_grid(\"Bias_spectroscopy.3ds\")\n\nfig = Figure(resolution = (800, 400))\nax = Axis(fig[1, 1])\n\n# line plot of `Current` vs `Bias` for all specified x and y indices\nplot_spectrum(grid, \"Bias\", \"Current\", 10:12, 12, backend=CairoMakie)\n\nfig","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using SpmGrids\nusing GLMakie\n\ngrid = load_grid(\"Bias_spectroscopy.3ds\")\n\nfig = Figure(resolution = (800, 400))\nax = Axis(fig[1, 1])\n\n# x, y, as well as channel values can be indexed\nplot_spectrum(grid, \"Bias\", \"Frequency Shift\", 8, 2:6, 20:120, backend=GLMakie)\n\n# add legend\nfig[1, 2] = Legend(fig, ax, \"Legend\", framevisible=false)\n\nfig","category":"page"},{"location":"#Plotting-lines","page":"Introduction","title":"Plotting lines","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"using SpmGrids\nusing CairoMakie\n\ngrid = load_grid(\"Z_spectroscopy.3ds\")\n\nfig = Figure(resolution = (800, 800));\nax = Axis(fig[1, 1])\n# plot the `Frequency Shift` for 120th point in the sweep for the second row\nplot_line(grid, \"Frequency Shift\", :, 2, 120, backend=CairoMakie)\nfig[1, 2] = Legend(fig, ax, \"\", framevisible=false, labelsize=10)\n\nax = Axis(fig[2, 1])\n# plot the `Frequency Shift` at point (2,3) against the sweep signal\n# keywords (e.g. `color`) with be passed to the plot function for forward channel\nplot_line(grid, \"Frequency Shift\", 2, 3, :, color=\"#a0a0a0\", backend=CairoMakie)\nfig[2, 2] = Legend(fig, ax, \"\", framevisible=false, labelsize=10)\n\nax = Axis(fig[3, 1])\n# plot the `Frequency Shift` at point (3,2) against `Current` channel\n# keywords with suffix `_bwd` (e.g. `color_bwd`) will be passed\n# to the plot function for backward channel\nplot_line(grid, \"Frequency Shift\", 3,2, :, channel_x=\"Current\", color_bwd=\"#a0a0a0\", backend=CairoMakie)\nfig[3, 2] = Legend(fig, ax, \"\", framevisible=false, labelsize=10)\n\nfig","category":"page"},{"location":"#More-information","page":"Introduction","title":"More information","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A more detailed description can be found in the Reference","category":"page"}]
}
