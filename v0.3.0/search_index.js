var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [SpmGrids]\nPrivate = false","category":"page"},{"location":"reference/#SpmGrids.get_channel","page":"Reference","title":"SpmGrids.get_channel","text":"get_channel(grid::SpmGrid, name::AbstractString,\n    x_index::GridRange, y_index::GridRange, channel_index::GridRange=:)::Array{Float32}\n\nReturns the data for the channel name at the point(s) specified by x_index, y_index The channel data can be indexed by channel_index.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SpmGrids.get_parameter-Tuple{SpmGrids.SpmGrid, AbstractString, Union{Colon, UnitRange{Int64}, Int64}, Union{Colon, UnitRange{Int64}, Int64}}","page":"Reference","title":"SpmGrids.get_parameter","text":"get_parameter(grid::SpmGrid, name::AbstractString,\n    x_index::GridRange, y_index::GridRange)::Union{Float32, Array{Float32}}\n\nReturns the value for parameter name at the point(s)specified by x_index, y_index.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SpmGrids.interactive_display","page":"Reference","title":"SpmGrids.interactive_display","text":"interactive_display(grid::SpmGrid, response_channel::String=\"\", response_channel2::String=\"\", parameter::String=\"\";\n    backward::Bool=false, fig::Any=nothing, backend::Module=Main)::Any\n\nDisplay the grid in an interactive GUI that can be used in Pluto, Jupyter, or other interactive environments. response_channel specifies the initial choice of the response channel, response_channel2 specifies the initial choice of the response channel for the second line plot, parameter specifies the initial parameter to plot.\n\nBefore using this function, a Makie backend (GLMakie, CairoMakie or WGLMakie) should be imported and the figure can be set up and passed via the fig keyword argument.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SpmGrids.interactive_display-2","page":"Reference","title":"SpmGrids.interactive_display","text":"interactive_display(fname::String, response_channel::String=\"\", response_channel2::String=\"\", parameter::String=\"\";\n    backward::Bool=false, fig::Any=nothing, backend::Module=Main, kwargs...)::Any\n\nDisplay the grid in an interactive GUI that can be used in Pluto, Jupyter, or other interactive environments. response_channel specifies the initial choice of the response channel, response_channel2 specifies the initial choice of the response channel for the second line plot, parameter specifies the initial parameter to plot.\n\nBefore using this function, a Makie backend (GLMakie, CairoMakie or WGLMakie) should be imported and the figure can be set up and passed via the fig keyword argument.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SpmGrids.load_grid-Tuple{AbstractString}","page":"Reference","title":"SpmGrids.load_grid","text":"load_grid(filename::AbstractString; header_only::Bool=false)\n\nLoads a grid from a binary file. If header_only is true, then only the header is loaded.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SpmGrids.plot_cube","page":"Reference","title":"SpmGrids.plot_cube","text":"plot_cube(grid::SpmGrid, response_channel::String,\n    x_index::GridRange, y_index::GridRange, channel_index::GridRange=nothing;\n    backward::Bool=false, ax::Any=nothing, backend::Module=Main,\n    kwargs...)::NamedTuple\n\nPlots a cube of response_channel in the three-dimensional data spanned by the x,y plane and the sweep signal. Indexing is done through x_index, y_index and channel_index and should be done such that a three-dimensional array is obtained. If backward is set to true, then data from the backward sweep is plotted if it exists.\n\nBefore using this function, a Makie backend (GLMakie, CairoMakie or WGLMakie) should be imported and the figure or axis should be set up. A particular Axis can be specified via the ax keyword argument. By default, the Makie backend from the Main module is used; it can also be directly specified via the backend keyword argument.\n\nExtra keyword arguments can be specified and will be passed through to the plot function.\n\nReturns a NamedTuple containing the volume-plot, and a colorbar label.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SpmGrids.plot_cube-Tuple{NamedTuple, Any, Any, Module}","page":"Reference","title":"SpmGrids.plot_cube","text":"plot_cube(data::NamedTuple, ax::Any, ax_cb::Any, backend::Module; kwargs...)::Nothing\n\nPlots a cube from the NamedTuple data on Axis ax. A colorbar is also plotted on ax_cb. A Makie backend should be given and extra keyword arguments can be provided.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SpmGrids.plot_line","page":"Reference","title":"SpmGrids.plot_line","text":"plot_line(grid::SpmGrid, response_channel::String,\n    x_index::GridRange, y_index::GridRange, channel_index::GridRange=nothing;\n    sweep_channel::String=\"\", backward::Bool=true, ax::Any=nothing, backend::Module=Main,\n    kwargs...)::Nothing\n\nPlots the response_channel along a line in the three-dimensional data spanned by x,y plane and the spectroscopy data. Indexing is done through x_index, y_index and channel_index and should be done such that a one-dimensional array is obtained. It is also possible to plot response_channel vs sweep_channel (which defaults to the sweep signal if not specified) for one point in the grid If backward is true (default), the plot will include data from backward sweep as well (if they exist).\n\nBefore using this function, a Makie backend (GLMakie, CairoMakie or WGLMakie) should be imported and the figure or axis should be set up. A particular Axis can be specified via the ax keyword argument. By default, the Makie backend from the Main module is used; it can also be directly specified via the backend keyword argument.\n\nExtra keyword arguments can be specified and will be passed through to the plot function. Keyword arrguments with the suffix _bwd will be used for plotting of the backward scan.    \n\n\n\n\n\n","category":"function"},{"location":"reference/#SpmGrids.plot_line-Tuple{NamedTuple, Any, Module}","page":"Reference","title":"SpmGrids.plot_line","text":"plot_line(data::NamedTuple, ax::Any, backend::Module; backward::Bool=true, kwargs...)::Nothing\n\nPlots a line from the NamedTuple x vs y and x_bwd vs y_bwd on Axis ax\n\n\n\n\n\n","category":"method"},{"location":"reference/#SpmGrids.plot_parameter_plane-Tuple{SpmGrids.SpmGrid, String, Union{Colon, UnitRange{Int64}, Int64}, Union{Colon, UnitRange{Int64}, Int64}}","page":"Reference","title":"SpmGrids.plot_parameter_plane","text":"plotparameterplane(grid::SpmGrid, parameter::String,         xindex::GridRange, yindex::GridRange;         ax::Any=nothing, backend::Module=Main,         kwargs...)::NamedTuple\n\nPlots values of parameters as a function of the x,y plane Indexing is done through x_index, y_index.\n\nBefore using this function, a Makie backend (GLMakie, CairoMakie or WGLMakie) should be imported and the figure or axis should be set up. A particular Axis can be specified via the ax keyword argument. By default, the Makie backend from the Main module is used; it can also be directly specified via the backend keyword argument.\n\nExtra keyword arguments can be specified and will be passed through to the plot function.\n\nReturns a NamedTuple containing the heatmap, the colorbar label and the plot label.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SpmGrids.plot_plane","page":"Reference","title":"SpmGrids.plot_plane","text":"plot_plane(grid::SpmGrid, response_channel::String,\n    x_index::GridRange, y_index::GridRange, channel_index::GridRange=:;\n    backward::Bool=false, ax::Any=nothing, backend::Module=Main,\n    kwargs...)::NamedTuple\n\nPlots a plane of response_channel in the three-dimensional data spanned by x,y plane and the sweep signal. Indexing is done through x_index, y_index and channel_index and should be done such that a two-dimensional array is obtained. If backward is set to true, then data from the backward sweep is plotted if it exists.\n\nBefore using this function, a Makie backend (GLMakie, CairoMakie or WGLMakie) should be imported and the figure or axis should be set up. A particular Axis can be specified via the ax keyword argument. By default, the Makie backend from the Main module is used; it can also be directly specified via the backend keyword argument.\n\nExtra keyword arguments can be specified and will be passed through to the plot function.\n\nReturns a NamedTuple containing the heatmap, the colorbar label and the plot label.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SpmGrids.plot_plane-Tuple{NamedTuple, Any, Any, Module}","page":"Reference","title":"SpmGrids.plot_plane","text":"plot_plane(data::NamedTuple, ax::Any, ax_cb::Any, backend::Module; kwargs...)::Nothing\n\nPlots a plane from the NamedTuple data on Axis ax. A colorbar is also plotted on ax_cb. A Makie backend should be given and extra keyword arguments can be provided.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SpmGrids.plot_spectrum","page":"Reference","title":"SpmGrids.plot_spectrum","text":"plot_spectrum(grid::SpmGrid, sweep_channel::String, response_channel::String,\n    x_index::GridRange, y_index::GridRange, channel_index::GridRange=:;\n    backward::Bool=true, ax::Any=nothing, backend::Module=Main,\n    kwargs...)::Nothing\n\nPlots a line plot of response_channel vs sweep_channel on the given x_index and y_index. If sweep_channel is \"\", then the sweep signal will be used for sweep_channel. Additionally, the spectrum data can be indexed by channel_index. If include_backward is true` (default), the plot will include data from backward sweep as well (if they exist).\n\nBefore using this function, a Makie backend (GLMakie, CairoMakie or WGLMakie) should be imported and the figure or axis should be set up. A particular Axis can be specified via the ax keyword argument. By default, the Makie backend from the Main module is used; it can also be directly specified via the backend keyword argument.\n\nExtra keyword arguments can be specified and will be passed through to the plot function. Keyword arrguments with the suffix _bwd will be used for plotting of the backward scan.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SpmGrids.xyindex_to_point-Tuple{SpmGrids.SpmGrid, Int64, Int64}","page":"Reference","title":"SpmGrids.xyindex_to_point","text":"xyindex_to_point(grid::SpmGrid, index_x::Int, index_y)::Tuple{Float32,Float32}\n\nConverts index_x and index_y of grid to point coordinates in physical units.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = SpmGrids","category":"page"},{"location":"#SpmGrids","page":"Introduction","title":"SpmGrids","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Documentation for SpmGrids.","category":"page"},{"location":"#About","page":"Introduction","title":"About","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A julia library to analyze scanning tuprobe microscopy grid data. Currently, only Nanonis files are supported.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"SpmGrids can be installed from the Julia package registry via:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Pkg\nPkg.add(\"SpmGrids\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Additionally, you need to install a Makie backend.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Pkg\nPkg.add(\"GLMakie\")","category":"page"},{"location":"#Interactive-widget","page":"Introduction","title":"Interactive widget","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Now the fun begins. The easiest way to analyze grids is the interactive widget.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using SpmGrids\nusing GLMakie  # you can also use the WGLMakie backend\n\ninteractive_display(\"Bias_spectroscopy.3ds\", colormap=:bluegreenyellow)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: demo of interactive display)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"You can also easily create and adapt these plots in julia, as described in the Tutorial.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#Loading-data-and-parameters","page":"Tutorial","title":"Loading data and parameters","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using SpmGrids\ngrid = load_grid(\"Bias_spectroscopy.3ds\");\n\ngrid.experiment_parameters  # available parameter names\ngrid.channel_names  # available channel names\ngrid.size, grid.size_unit, grid.center, grid.angle, grid.pixelsize  # grid parameters\ngrid.start_time, grid.end_time  # more parameters\ngrid.header  # even more parameters\n\nx = get_channel(grid, \"Current\", 5, 5);  # `Current` channel at point 5,5\nx = get_channel(grid, \"Current\", :, 5);  # `Current` channel for 5th row\n#  20th point of `Current` channel for 5th row\nx = get_channel(grid, \"Current\", :, 5, 20);\nx = get_channel(grid, grid.sweep_signal, 5, 6);  # sweep signal at point 5,6\np = get_parameter(grid, \"Z offset\", 3, 5);  # `Z offset` parameter at point 3,5\n\n# get the first 50 points of the `Current` channel for 5th and 6th rows\nx = get_channel(grid, \"Current\", :, 5:6, 1:50);\nsize(x) # 50 points of data for 20 columns and 2 rows","category":"page"},{"location":"tutorial/#Plotting-spectra","page":"Tutorial","title":"Plotting spectra","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using SpmGrids\nusing CairoMakie  # use any Makie backend you like\n\ngrid = load_grid(\"Bias_spectroscopy.3ds\")\n\nfig = Figure(resolution = (600, 300))\nax = Axis(fig[1, 1])\n\n# line plot of `Current` vs `Bias` for all specified x and y indices\nplot_spectrum(grid, \"Bias\", \"Current\", 10:12, 12, backend=CairoMakie)\n\nfig","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using SpmGrids\nusing CairoMakie\n\ngrid = load_grid(\"Bias_spectroscopy.3ds\")\n\nfig = Figure(resolution = (600, 300))\nax = Axis(fig[1, 1])\n\n# x, y, as well as channel values can be indexed\nplot_spectrum(grid, \"Bias\", \"Frequency Shift\", 8, 2:6, 20:120, backend=CairoMakie)\n\n# add legend\nfig[1, 2] = Legend(fig, ax, \"Legend\", framevisible=false)\n\nfig","category":"page"},{"location":"tutorial/#Plotting-lines","page":"Tutorial","title":"Plotting lines","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using SpmGrids\nusing CairoMakie\n\ngrid = load_grid(\"Z_spectroscopy.3ds\")\n\nfig = Figure(resolution = (800, 800));\nax = Axis(fig[1, 1])\n# plot the `Frequency Shift` for 120th point in the sweep for the second row\nplot_line(grid, \"Frequency Shift\", :, 2, 120, backend=CairoMakie)\nfig[1, 2] = Legend(fig, ax, \"\", framevisible=false, labelsize=10)\n\nax = Axis(fig[2, 1])\n# plot the `Frequency Shift` at point (2,3) against the sweep signal\n# keywords (e.g. `color`) with be passed to the plot function for forward channel\nplot_line(grid, \"Frequency Shift\", 2, 3, :, color=\"#a0a0a0\", backend=CairoMakie)\nfig[2, 2] = Legend(fig, ax, \"\", framevisible=false, labelsize=10)\n\nax = Axis(fig[3, 1])\n# plot the `Frequency Shift` at point (3,2) against `Current` channel\n# keywords with suffix `_bwd` (e.g. `color_bwd`) will be passed\n# to the plot function for backward channel\nplot_line(grid, \"Frequency Shift\", 3,2, :, sweep_channel=\"Current\", color_bwd=\"#a0a0a0\", backend=CairoMakie)\nfig[3, 2] = Legend(fig, ax, \"\", framevisible=false, labelsize=10)\n\nfig","category":"page"},{"location":"tutorial/#Plotting-planes","page":"Tutorial","title":"Plotting planes","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using SpmGrids\nusing CairoMakie\n\ngrid = load_grid(\"Bias_spectroscopy.3ds\")\n\nfig = Figure(resolution = (800, 400));\ng1 = fig[1, 1] = GridLayout()\ng2 = fig[1, 2] = GridLayout()\n\nax1 = Axis(g1[1, 1])\n\n# plot the `Frequency Shift` for 120th point in the sweep\nr1 = plot_plane(grid, \"Frequency Shift\", :, :, 120,\n    ax=ax1, backend=CairoMakie)\nax1.title = r1.plot_label\n\n# add colorbars\nColorbar(g1[1, 2], r1.plot, label=r1.data_label)\n\nfig","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# add second plot\nax2 = Axis(g2[1, 1])\n\n# plot `Current` values of the backward sweep\n# for 10th to 100th point in the sweep for the 15th row\nr2 = plot_plane(grid, \"Current\", :, 15, 1:100,\n    ax=ax2, backward=true, colormap=:imola, backend=CairoMakie)\nax2.title = r2.plot_label\n\nColorbar(g2[1, 2], r2.plot, label=r2.data_label)\n\n# mark 15th row in the first plot\npx, py = xyindex_to_point(grid, 1, 15)\nhlines!(ax1, py * 1e9, color=:red)  # we need to convert to nm\n\nfig","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(Still need to figure out why the colorbars are not aligned.)","category":"page"},{"location":"tutorial/#Plotting-cubes","page":"Tutorial","title":"Plotting cubes","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using SpmGrids\nusing GLMakie\n\ngrid = load_grid(\"Bias_spectroscopy.3ds\")\n\nfig = Figure(resolution = (500, 400));\nax = Axis3(fig[1, 1], perspectiveness=0.5)\n\nr = plot_cube(grid, \"Current\", :, :, :,\n    colormap=:Spectral_11, backend=GLMakie)\nColorbar(fig[1,2], r.plot, label=r.data_label)\n\nfig","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: Cube plot)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"All the plots can be interactive if you use the right Makie backend.","category":"page"},{"location":"tutorial/#More-information","page":"Tutorial","title":"More information","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A more detailed description can be found in the Reference.","category":"page"}]
}
